import controlP5.*;


public class Display extends PApplet implements Observer {

  private ControlP5 cp5;
  private CheckBox checkbox;

  private int sz, points, currentLine;
  private float diam, adelta, rotationAngle;
  private ArrayList<Line> lines;
  private boolean oneLayerOn, twoLayerOn, upToCurrentOn;


  class Line {
    PVector start, end;

    Line (PVector s, PVector e) {
      start = s; end = e;
    }
  }


  Display (int points, int size) {
    super();

    diam = 4 * size / 5;
    sz = size;
    this.points = points;
    adelta = TWO_PI / points;
    oneLayerOn = true;
    twoLayerOn = true;
    currentLine = 0;
    lines = new ArrayList<Line>();


    // init
    PApplet.runSketch(new String[] {this.getClass().getName()}, this);
  }


  void setup() {
    createGUI();
  }

  void createGUI() {
    cp5 = new ControlP5(this);

    checkbox = cp5.addCheckBox("checkBox")
               .setPosition(10, 40)
               .setColorForeground(color(120))
               .setColorActive(color(120))
               .setColorLabel(color(0))
               .setSize(15, 15)
               .setSpacingColumn(20)
               .addItem("Layer 1", 0)
               .addItem("Layer 2", 1)
               .addItem("Up to current", 2);

    cp5.addBang("left")
    .setPosition(10, 90)
    .setColorLabel(color(0))
    .setSize(15, 15)
    .setId(0);

    cp5.addBang("right")
    .setPosition(45, 90)
    .setColorLabel(color(0))
    .setSize(15, 15)
    .setId(1);
  }





// Variable declarations
// autogenerated do not edit
  GCheckbox checkboxL1;



  void addLine(int s, int e) {
    if (s < 0 || e < 0) return;
    s = s % points; e = e % points;
    lines.add (new Line(locationToCoord(s), locationToCoord(e)));
  }

  private PVector locationToCoord (int p) {
    PVector v = new PVector(0, -1);
    v.rotate(p * adelta);
    v.mult(diam / 2);
    return v;

  }

  void draw() {
    background(200);

    pushMatrix();
    translate(width / 2, height / 2);
    rotate(rotationAngle);

    noFill();
    stroke(0);
    strokeWeight(2);
    ellipse(0, 0, diam, diam);

    // drawLine
    for (int i = 0; i < lines.size(); i++) {
      int layerNumber = i % 2;
      if (layerNumber == 0 && !oneLayerOn) continue;
      if (layerNumber == 1 && !twoLayerOn) continue;
      if (i == currentLine) {stroke(255, 0, 0); strokeWeight(2);}
      else {stroke(0); strokeWeight(.1);}
      if (upToCurrentOn && i>=currentLine) break;
      
      Line l = lines.get(i);
      PVector s = l.start;
      PVector e = l.end;
      line(s.x, s.y, e.x, e.y);
    }

    popMatrix();

    // Draw text
    textFont(font, 18);
    fill(0);
    text(getCompletionPerecentage(), 10, 30);
    text(getCompletionPerecentage(), 10, 30);
  }

  public void settings() {
    size(sz, sz);
  }


  void controlEvent(ControlEvent theEvent) {
    if (theEvent.isFrom(checkbox)) {
      oneLayerOn = (int)(checkbox.getArrayValue()[0]) == 0;
      twoLayerOn = (int)(checkbox.getArrayValue()[1]) == 0;
      upToCurrentOn = (int)(checkbox.getArrayValue()[2]) == 1;
    }
    else if (theEvent.getController().getName().equals("left")) rotateLeft();
    else if (theEvent.getController().getName().equals("right")) rotateRight();
  }



  void keyPressed() {
    if (ardu == null || mm == null) return;

    if (key == '1')  toggleLayer1();
    else if (key == '2') toggleLayer2();
    else if (key == 'r' || key == 'R') rotateRight();
    else if (key == 'l' || key == 'L') rotateLeft();
  }

  void observe(RotationAction action) {
    action.addObserver(this);
  }


  public void update (Observable obs, Object obj) {
    currentLine++;
  }

  private void highlightLine (int n) {
    currentLine = n;
  }


  private void toggleLayer1() {
    oneLayerOn = !oneLayerOn;
  }

  private void toggleLayer2() {
    twoLayerOn = !twoLayerOn;
  }

  private void toggleUpToCurrent()
  {
    upToCurrentOn= !upToCurrentOn;
  }

  private void rotateLeft() {
    rotationAngle -= HALF_PI;
  }

  private void rotateRight() {
    rotationAngle += HALF_PI;
  }

  private String getCompletionPerecentage() {
    int total= lines.size();
    float perc= (float)(100*currentLine)/lines.size();
    String percf= String.format("%.1f", perc); 
    return percf+"%      ("+currentLine+" / "+ total +")";
  }
}